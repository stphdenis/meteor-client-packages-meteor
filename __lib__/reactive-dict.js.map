{"version":3,"sources":["meteor://ðŸ’»app/packages/reactive-dict/reactive-dict.js","meteor://ðŸ’»app/packages/reactive-dict/migration.js"],"names":["stringify","value","undefined","EJSON","parse","serialized","changed","v","ReactiveDict","dictName","_registerDictForMigrate","keys","_loadMigratedDict","name","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","_","extend","prototype","set","keyOrObject","self","_setObject","key","keyExisted","has","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","each","clear","oldKeys","didRemove","object","_getMigrationData","_migratedDictData","_dictsToMigrate","dict","Meteor","isClient","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = dictName;\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      self._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _setDefaultObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.setDefault(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}