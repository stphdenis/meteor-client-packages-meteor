{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/client_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_client.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js","meteor://ðŸ’»app/packages/accounts-base/localstorage_token.js","meteor://ðŸ’»app/packages/accounts-base/url_client.js"],"names":[],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nimport {AccountsTest} from \"./url_client.js\";\nimport \"./localstorage_token.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the client version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsClient,\n  AccountsTest,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = false;\n    this._loggingInDeps = new Tracker.Dependency;\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    if (this._loggingIn !== x) {\n      this._loggingIn = x;\n      this._loggingInDeps.changed();\n    }\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    this._loggingInDeps.depend();\n    return this._loggingIn;\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function (error) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    }\n    options.userCallback.apply(this, arguments);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      self.connection.onReconnect = function () {\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks(error);\n            }});\n        }\n      };\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks(error);\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks(e);\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks();\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this.connection.onReconnect = null;\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n}\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere but publish functions\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    return (this._options.loginExpirationInDays ||\n            DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n   return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]}