{"version":3,"sources":["meteor://ðŸ’»app/packages/random/random.js","meteor://ðŸ’»app/packages/random/deprecated.js"],"names":[],"mappings":"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","file":"/packages/random.js","sourcesContent":["// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,\n// window.crypto.getRandomValues() in the browser) when available. If these\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically\n// strong, and we seed it with various sources such as the date, Math.random,\n// and window size on the client.  When using crypto.getRandomValues(), our\n// primitive is hexString(), from which we construct fraction(). When using\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use\n// that to construct hex string.\n\nif (Meteor.isServer)\n  var nodeCrypto = Npm.require('crypto');\n\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript\n// for a full discussion and Alea implementation.\nvar Alea = function () {\n  function Mash() {\n    var n = 0xefc8249d;\n\n    var mash = function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n\n    mash.version = 'Mash 0.9';\n    return mash;\n  }\n\n  return (function (args) {\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    if (args.length == 0) {\n      args = [+new Date];\n    }\n    var mash = Mash();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < args.length; i++) {\n      s0 -= mash(args[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(args[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(args[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n\n    var random = function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n    random.uint32 = function() {\n      return random() * 0x100000000; // 2^32\n    };\n    random.fract53 = function() {\n      return random() +\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n    };\n    random.version = 'Alea 0.9';\n    random.args = args;\n    return random;\n\n  } (Array.prototype.slice.call(arguments)));\n};\n\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +\n  \"0123456789-_\";\n\n// `type` is one of `RandomGenerator.Type` as defined below.\n//\n// options:\n// - seeds: (required, only for RandomGenerator.Type.ALEA) an array\n//   whose items will be `toString`ed and used as the seed to the Alea\n//   algorithm\nvar RandomGenerator = function (type, options) {\n  var self = this;\n  self.type = type;\n\n  if (!RandomGenerator.Type[type]) {\n    throw new Error(\"Unknown random generator type: \" + type);\n  }\n\n  if (type === RandomGenerator.Type.ALEA) {\n    if (!options.seeds) {\n      throw new Error(\"No seeds were provided for Alea PRNG\");\n    }\n    self.alea = Alea.apply(null, options.seeds);\n  }\n};\n\n// Types of PRNGs supported by the `RandomGenerator` class\nRandomGenerator.Type = {\n  // Use Node's built-in `crypto.getRandomBytes` (cryptographically\n  // secure but not seedable, runs only on the server). Reverts to\n  // `crypto.getPseudoRandomBytes` in the extremely uncommon case that\n  // there isn't enough entropy yet\n  NODE_CRYPTO: \"NODE_CRYPTO\",\n\n  // Use non-IE browser's built-in `window.crypto.getRandomValues`\n  // (cryptographically secure but not seedable, runs only in the\n  // browser).\n  BROWSER_CRYPTO: \"BROWSER_CRYPTO\",\n\n  // Use the *fast*, seedaable and not cryptographically secure\n  // Alea algorithm\n  ALEA: \"ALEA\",\n};\n\n/**\n * @name Random.fraction\n * @summary Return a number between 0 and 1, like `Math.random`.\n * @locus Anywhere\n */\nRandomGenerator.prototype.fraction = function () {\n  var self = this;\n  if (self.type === RandomGenerator.Type.ALEA) {\n    return self.alea();\n  } else if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n    var numerator = parseInt(self.hexString(8), 16);\n    return numerator * 2.3283064365386963e-10; // 2^-32\n  } else if (self.type === RandomGenerator.Type.BROWSER_CRYPTO) {\n    var array = new Uint32Array(1);\n    window.crypto.getRandomValues(array);\n    return array[0] * 2.3283064365386963e-10; // 2^-32\n  } else {\n    throw new Error('Unknown random generator type: ' + self.type);\n  }\n};\n\n/**\n * @name Random.hexString\n * @summary Return a random string of `n` hexadecimal digits.\n * @locus Anywhere\n * @param {Number} n Length of the string\n */\nRandomGenerator.prototype.hexString = function (digits) {\n  var self = this;\n  if (self.type === RandomGenerator.Type.NODE_CRYPTO) {\n    var numBytes = Math.ceil(digits / 2);\n    var bytes;\n    // Try to get cryptographically strong randomness. Fall back to\n    // non-cryptographically strong if not available.\n    try {\n      bytes = nodeCrypto.randomBytes(numBytes);\n    } catch (e) {\n      // XXX should re-throw any error except insufficient entropy\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);\n    }\n    var result = bytes.toString(\"hex\");\n    // If the number of digits is odd, we'll have generated an extra 4 bits\n    // of randomness, so we need to trim the last digit.\n    return result.substring(0, digits);\n  } else {\n    return this._randomString(digits, \"0123456789abcdef\");\n  }\n};\n\nRandomGenerator.prototype._randomString = function (charsCount,\n                                                    alphabet) {\n  var self = this;\n  var digits = [];\n  for (var i = 0; i < charsCount; i++) {\n    digits[i] = self.choice(alphabet);\n  }\n  return digits.join(\"\");\n};\n\n/**\n * @name Random.id\n * @summary Return a unique identifier, such as `\"Jjwjg6gouWLXhMGKW\"`, that is\n * likely to be unique in the whole world.\n * @locus Anywhere\n * @param {Number} [n] Optional length of the identifier in characters\n *   (defaults to 17)\n */\nRandomGenerator.prototype.id = function (charsCount) {\n  var self = this;\n  // 17 characters is around 96 bits of entropy, which is the amount of\n  // state in the Alea PRNG.\n  if (charsCount === undefined)\n    charsCount = 17;\n\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);\n};\n\n/**\n * @name Random.secret\n * @summary Return a random string of printable characters with 6 bits of\n * entropy per character. Use `Random.secret` for security-critical secrets\n * that are intended for machine, rather than human, consumption.\n * @locus Anywhere\n * @param {Number} [n] Optional length of the secret string (defaults to 43\n *   characters, or 256 bits of entropy)\n */\nRandomGenerator.prototype.secret = function (charsCount) {\n  var self = this;\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per\n  // character.\n  if (charsCount === undefined)\n    charsCount = 43;\n  return self._randomString(charsCount, BASE64_CHARS);\n};\n\n/**\n * @name Random.choice\n * @summary Return a random element of the given array or string.\n * @locus Anywhere\n * @param {Array|String} arrayOrString Array or string to choose from\n */\nRandomGenerator.prototype.choice = function (arrayOrString) {\n  var index = Math.floor(this.fraction() * arrayOrString.length);\n  if (typeof arrayOrString === \"string\")\n    return arrayOrString.substr(index, 1);\n  else\n    return arrayOrString[index];\n};\n\n// instantiate RNG.  Heuristically collect entropy from various sources when a\n// cryptographic PRNG isn't available.\n\n// client sources\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientHeight) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientHeight) ||\n      1;\n\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||\n      (typeof document !== 'undefined'\n       && document.documentElement\n       && document.documentElement.clientWidth) ||\n      (typeof document !== 'undefined'\n       && document.body\n       && document.body.clientWidth) ||\n      1;\n\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";\n\nfunction createAleaGeneratorWithGeneratedSeed() {\n  return new RandomGenerator(\n    RandomGenerator.Type.ALEA,\n    {seeds: [new Date, height, width, agent, Math.random()]});\n};\n\nif (Meteor.isServer) {\n  Random = new RandomGenerator(RandomGenerator.Type.NODE_CRYPTO);\n} else {\n  if (typeof window !== \"undefined\" && window.crypto &&\n      window.crypto.getRandomValues) {\n    Random = new RandomGenerator(RandomGenerator.Type.BROWSER_CRYPTO);\n  } else {\n    // On IE 10 and below, there's no browser crypto API\n    // available. Fall back to Alea\n    //\n    // XXX looks like at the moment, we use Alea in IE 11 as well,\n    // which has `window.msCrypto` instead of `window.crypto`.\n    Random = createAleaGeneratorWithGeneratedSeed();\n  }\n}\n\n// Create a non-cryptographically secure PRNG with a given seed (using\n// the Alea algorithm)\nRandom.createWithSeeds = function (...seeds) {\n  if (seeds.length === 0) {\n    throw new Error(\"No seeds were provided\");\n  }\n  return new RandomGenerator(RandomGenerator.Type.ALEA, {seeds: seeds});\n};\n\n// Used like `Random`, but much faster and not cryptographically\n// secure\nRandom.insecure = createAleaGeneratorWithGeneratedSeed();\n","// Before this package existed, we used to use this Meteor.uuid()\n// implementing the RFC 4122 v4 UUID. It is no longer documented\n// and will go away.\n// XXX COMPAT WITH 0.5.6\nMeteor.uuid = function () {\n  var HEX_DIGITS = \"0123456789abcdef\";\n  var s = [];\n  for (var i = 0; i < 36; i++) {\n    s[i] = Random.choice(HEX_DIGITS);\n  }\n  s[14] = \"4\";\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);\n  s[8] = s[13] = s[18] = s[23] = \"-\";\n\n  var uuid = s.join(\"\");\n  return uuid;\n};\n"]}