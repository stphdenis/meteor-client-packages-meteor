{"version":3,"sources":["meteor://ðŸ’»app/packages/callback-hook/hook.js"],"names":[],"mappingswF","file":"/packages/callback-hook.js","sourcesContent":["// XXX This pattern is under development. Do not add more callsites\n// using this package for now. See:\n// https://meteor.hackpad.com/Design-proposal-Hooks-YxvgEW06q6f\n//\n// Encapsulates the pattern of registering callbacks on a hook.\n//\n// The `each` method of the hook calls its iterator function argument\n// with each registered callback.  This allows the hook to\n// conditionally decide not to call the callback (if, for example, the\n// observed object has been closed or terminated).\n//\n// By default, callbacks are bound with `Meteor.bindEnvironment`, so they will be\n// called with the Meteor environment of the calling code that\n// registered the callback. Override by passing { bindEnvironment: false }\n// to the constructor.\n//\n// Registering a callback returns an object with a single `stop`\n// method which unregisters the callback.\n//\n// The code is careful to allow a callback to be safely unregistered\n// while the callbacks are being iterated over.\n//\n// If the hook is configured with the `exceptionHandler` option, the\n// handler will be called if a called callback throws an exception.\n// By default (if the exception handler doesn't itself throw an\n// exception, or if the iterator function doesn't return a falsy value\n// to terminate the calling of callbacks), the remaining callbacks\n// will still be called.\n//\n// Alternatively, the `debugPrintExceptions` option can be specified\n// as string describing the callback.  On an exception the string and\n// the exception will be printed to the console log with\n// `Meteor._debug`, and the exception otherwise ignored.\n//\n// If an exception handler isn't specified, exceptions thrown in the\n// callback will propagate up to the iterator function, and will\n// terminate calling the remaining callbacks if not caught.\n\nHook = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextCallbackId = 0;\n  self.callbacks = {};\n  // Whether to wrap callbacks with Meteor.bindEnvironment\n  self.bindEnvironment = true;\n  if (options.bindEnvironment === false)\n    self.bindEnvironment = false;\n\n  if (options.exceptionHandler)\n    self.exceptionHandler = options.exceptionHandler;\n  else if (options.debugPrintExceptions) {\n    if (! _.isString(options.debugPrintExceptions))\n      throw new Error(\"Hook option debugPrintExceptions should be a string\");\n    self.exceptionHandler = options.debugPrintExceptions;\n  }\n};\n\n_.extend(Hook.prototype, {\n  register: function (callback) {\n    var self = this;\n    var exceptionHandler =  self.exceptionHandler || function (exception) {\n      // Note: this relies on the undocumented fact that if bindEnvironment's\n      // onException throws, and you are invoking the callback either in the\n      // browser or from within a Fiber in Node, the exception is propagated.\n      throw exception;\n    };\n\n    if (self.bindEnvironment) {\n      callback = Meteor.bindEnvironment(callback, exceptionHandler);\n    } else {\n      callback = dontBindEnvironment(callback, exceptionHandler);\n    }\n\n    var id = self.nextCallbackId++;\n    self.callbacks[id] = callback;\n\n    return {\n      stop: function () {\n        delete self.callbacks[id];\n      }\n    };\n  },\n\n  // For each registered callback, call the passed iterator function\n  // with the callback.\n  //\n  // The iterator function can choose whether or not to call the\n  // callback.  (For example, it might not call the callback if the\n  // observed object has been closed or terminated).\n  //\n  // The iteration is stopped if the iterator function returns a falsy\n  // value or throws an exception.\n  //\n  each: function (iterator) {\n    var self = this;\n\n    // Invoking bindEnvironment'd callbacks outside of a Fiber in Node doesn't\n    // run them to completion (and exceptions thrown from onException are not\n    // propagated), so we need to be in a Fiber.\n    Meteor._nodeCodeMustBeInFiber();\n\n    var ids = _.keys(self.callbacks);\n    for (var i = 0;  i < ids.length;  ++i) {\n      var id = ids[i];\n      // check to see if the callback was removed during iteration\n      if (_.has(self.callbacks, id)) {\n        var callback = self.callbacks[id];\n\n        if (! iterator(callback))\n          break;\n      }\n    }\n  }\n});\n\n// Copied from Meteor.bindEnvironment and removed all the env stuff.\nvar dontBindEnvironment = function (func, onException, _this) {\n  if (!onException || typeof(onException) === 'string') {\n    var description = onException || \"callback of async function\";\n    onException = function (error) {\n      Meteor._debug(\n        \"Exception in \" + description + \":\",\n        error && error.stack || error\n      );\n    };\n  }\n\n  return function (/* arguments */) {\n    var args = _.toArray(arguments);\n\n    var runAndHandleExceptions = function () {\n      try {\n        var ret = func.apply(_this, args);\n      } catch (e) {\n        onException(e);\n      }\n      return ret;\n    };\n\n    return runAndHandleExceptions();\n  };\n};\n"]}